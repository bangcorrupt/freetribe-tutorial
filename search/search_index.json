{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is a tutorial for Freetribe,  a free, open-source firmware for Electribe 2. A series of code examples demonstrate features of the Freetribe API, starting with basic operations and moving toward a more complex application.</p> <p>Before continuing, review the Getting Started section of the Freetribe Documentation. You will also need to install the toolchain and  attach a debugger in order to run the code examples.</p>"},{"location":"blink/","title":"Blink","text":"<p>This minimal example is reproduced from the Getting Started section of the Freetribe Documentation. We demonstrate the essential functions for Freetribe applications, use a non-blocking delay, and toggle an LED.</p>"},{"location":"blink/#create-application-files","title":"Create Application Files","text":"<p>Create a directory for the app and a file for the code.  The app directory must be under the <code>freetribe/cpu/apps/</code> directory in order for the build system to work.</p> <pre><code>mkdir cpu/src/apps/blink\ntouch cpu/src/apps/blink.c\n</code></pre>"},{"location":"blink/#include-freetribe-api","title":"Include Freetribe API","text":"<p>First, we must include the Freetribe API:</p> <pre><code>#include \"freetribe.h\"\n</code></pre> <p>This gives us access to all the functions our  application should need for interacting with the device.</p>"},{"location":"blink/#override-initialisation-function","title":"Override Initialisation Function","text":"<p>The function <code>app_init()</code> is defined as a weak reference in the Freetribe API. We override it in order to do any one time initialisation required by our app.  This is a good place to register callbacks for events we are interested in,  and do any initialisation required by external libraries.</p> <p>In this example, we initialise a static global variable to hold the start time of our delay.  The <code>app_init()</code> function takes no arguments and returns <code>t_status</code>, an integer error code.</p> <p>We also define a macro <code>DELAY_TIME</code> as the number of microseconds in 1 second.</p> <pre><code>// 1 second in microseconds.\n#define DELAY_TIME 1000000 \n\nstatic uint32_t g_start_time; \n\nt_status app_init(void) {\n\n    // Set start time.\n    g_start_time = ft_get_delay_current();\n\n    return SUCCESS;\n}\n</code></pre>"},{"location":"blink/#override-run-function","title":"Override Run Function","text":"<p>The <code>app_run()</code> function is also defined as a  weak reference in the Freetribe API.  We override it in order to do any continuous processing required by our app. In this example, we toggle an LED on the panel if 1 second has passed,  and reset the delay start time. </p> <p>The <code>app_run</code> function takes no arguments and returns nothing.</p> <pre><code>void app_run(void) {\n\n    // Wait for delay.\n    if (ft_delay(g_start_time, DELAY_TIME)) {\n\n        // Toggle LED.\n        ft_toggle_led(LED_TAP);\n\n        // Reset start time.\n        g_start_time = ft_get_delay_current();\n\n    }\n}\n</code></pre> <p>Each time the <code>app_run()</code> function is executed, we test the return value of <code>ft_delay()</code>. The function <code>ft_delay()</code> returns <code>true</code> if <code>delay_time</code> microseconds have passed since <code>start_time</code>. Once we enter the <code>if(...)</code> block, we toggle an LED and reset the start time  to the current value of the delay timer.</p>"},{"location":"blink/#build-the-application","title":"Build the Application","text":"<p>We build the application by running <code>make</code> in the root <code>freetribe</code> directory. We pass the name of our application directory (not the path) in the <code>APP</code> environment variable.</p> <pre><code>make clean &amp;&amp; make APP=blink\n</code></pre>"},{"location":"blink/#run-the-application","title":"Run the Application","text":"<p>First we must attach a debugger and start a GDB server.  Then we can connect to the GDB server and run the application:</p> <pre><code>arm-none-eabi-gdb\n</code></pre> <p>The commands in <code>freetribe/cpu/.gdbinit</code> should load the application and set a breakpoint at <code>main</code>. Once we hit the breakpoint, input <code>c</code> and press <code>Enter</code> to continue.  The LED on the <code>[Tap]</code> button should blink at a rate of 1 Hz.</p>"},{"location":"blink/#next-steps","title":"Next Steps","text":"<p>In the next example, we will register a callback for user tick events,  providing a synchronised sense of time to our application.</p>"},{"location":"blink/#blinkc","title":"<code>blink.c</code>","text":"<pre><code>// Freetribe: Minimal Example\n// License: AGPL-3.0-or-later\n\n#include \"freetribe.h\"\n\n// 1 second in microseconds.\n#define DELAY_TIME 1000000 \n\nstatic uint32_t g_start_time; \n\nt_status app_init(void) {\n\n    // Set start time.\n    g_start_time = ft_get_delay_current();\n\n    return SUCCESS;\n}\n\nvoid app_run(void) {\n\n    // Wait for delay.\n    if (ft_delay(g_start_time, DELAY_TIME)) {\n\n        // Toggle LED.\n        ft_toggle_led(LED_TAP);\n\n        // Reset start time.\n        g_start_time = ft_get_delay_current();\n\n    }\n}\n</code></pre>"},{"location":"license/","title":"License","text":"<p>AGPL-3.0-or-later.</p>"},{"location":"support/","title":"Support","text":""},{"location":"support/#support-for-you","title":"Support for You","text":"<p>If you need help with this project, please visit the  Freetribe discussion forum  on Github.</p>"},{"location":"support/#support-for-me","title":"Support for Me","text":"<p>Freetribe is free (as in GPL) and always will be. If you would like to support my work you are most welcome to  become a sponsor. Freetribe exists because people sponsored Hacktribe. Your support helps keep me motivated, fuelled and focussed.</p>"}]}